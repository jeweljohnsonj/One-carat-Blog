{
  "hash": "aaf23f8c918eea8db84cfd7afb80a8ae",
  "result": {
    "markdown": "---\ntitle: \"Using Notion as your task manager\"\ndescription: \"In this article I will showcase to you a template that I made, which can intelligently record and track tasks: you very own personal task manager with the help of Notion\"\ndate: \"06/30/2022\"\nformat: html\ncategories: [PhD, Notion, Zotero, productivity]\nimage: images/diary_thumb.png\n---\n\n\n## Using Notion as a task management dashboard\n\nWith the ability to make databases, Notion becomes an excellent tool to manage task lists. In this article, I am going to give you a quick tour of how you can use Notion as a task management dashboard with the templates I made.\n\nThere are four templates to add to your Notion database and you need all four of them to function properly. If you don't want to individually download each of them, then I have a single-page master template which features all the templates I made in one place. You can find it [here](https://jeweljohnson.notion.site/Template-PhD-Dashboard-136e837c4f0b4e61bc34e2aad7fb05b5).\n\n![The templates of interest for this article](images/task.png)\n\n1.  [To-do-list](https://jeweljohnson.notion.site/22735f3cfabd4e34b1a38cc2127c5202?v=8a3317915d4a4a9b97448ae74a9942bf): Acts as the master database where all tasks are stored. By default only shows incomplete tasks.\n2.  [Completed task list](https://jeweljohnson.notion.site/0423a149b5274574adb7d123665c8579?v=4743a4b9a12a45a992deebd972047ea9): Same template as above, but only tasks that are completed are shown. Act as an archive for completed tasks.\n3.  [Task manager](https://jeweljohnson.notion.site/Task-manager-246a1b4e5b4a4f1b846da8e42b5af756): Task manager interface where each task are arranged and displayed categorically. By default only shows incomplete tasks.\n4.  [Task dashboard](https://jeweljohnson.notion.site/Task-dashboard-195e0f63dbd94f518918f78708677e60): A dashboard which informs you which tasks are due and how long are they due to completion.\n\n## To-do-list\n\nFirst let us see the To-do-list. Specifically we will be seeing the 'Master table' view which lists out all the tasks which are yet to be completed. \n\n::: column-page\n![To-do-list](images/to_do_list.png)\n:::\n\nLike any basic to-do list, this list has task names and due date columns, along with many other columns. I have also tagged the tasks into their respective category and their priority. The 'Date added' and 'Due status is automatically calculated once you input a row value in the table. The 'Due status' column is dependent on a formula which takes in the 'Due date' value. The possible values for the 'Due status' column are; task finished, overdue, due today, due tomorrow, someday and later. Here 'someday' label means that the task has no due date mentioned and the 'later' label means that the task has at least 7 days before the due. The 'task finished' is only given to tasks which have the 'Done' column check box checked. The rest of the labels are what it says.\n\nYou can change every single aspect of this table to suit your needs. What might be tricky to change is the 'Due status' column as it is governed by a formula which may look complex but is actually very easy.\n\n:::{.callout-tip}\n## Due status formula\n\n````\nif(prop(\"Done\") == false, \nif(formatDate(prop(\"Due date\"),\"L\") == formatDate(now(), \"L\"), \"Due today\",\nif(prop(\"Due date\") < now(), \"Overdue\",\nif(prop(\"Due date\") <= dateAdd(now(), 1, \"days\"), \"Due tomorrow\",\nif(empty(prop(\"Due date\")), \"Someday\", \"Later\")))), \"Task finished\")\n\n````\n:::\n\nThe formula is a series of if statements. The syntax for the if statement in Notion is as follows;\n\n````\nboolean ? value : value\nif(boolean, value, value)\n\n````\nFrom the syntax, you can see that the if statement is dependent on a Boolean value.\n\nSo let us try to understand what this formula is trying to calculate, by taking each section separately.\n\n:::{.callout-note}\n## if(prop(\"Done\") == false\nThis means that if the 'Done' column is unchecked then run the rest of the statements, if not, then it returns the label 'Task finished' which you can see in the last part of the formula. The checkboxes in Notion follow Boolean values. Checked means true and unchecked means false.\n:::\n\n:::{.callout-note}\n## if(formatDate(prop(\"Due date\"),\"L\") == formatDate(now(), \"L\"), \"Due today\"\nThis is yet another 'if' statement but this time we are reformatting the date. The reason why we are reformatting the date is that, in Notion, any date is followed by time, so 12-12-2022 is Notion is denoted as 12-12-2022 12:00 AM. So there can be some issues where 'Due today' won't be properly shown. So reformatting the date to 'day' units is easier to work with. The `now()` function returns the current date. Therefore this formula simply returns the label 'Due today' if the due date matches the current date.\n:::\n\n:::{.callout-note}\n## if(prop(\"Due date\") < now(), \"Overdue\"\nThis formula returns an 'Overdue' label if the due date is past the current date.\n:::\n\n:::{.callout-note}\n## if(prop(\"Due date\") <= dateAdd(now(), 1, \"days\"), \"Due tomorrow\",\nThe `dateAdd()` function takes in the first value, which is the current date returned from the `now()` function, and then adds 1 unit of \"days\" to it. Therefore the formula boils down to checking if the due date is less than or equal to tomorrow and returns the 'Due tomorrow' label if it does. We give less than or equal to sign because we want the counter-statement to be strictly greater than so that, only then does the rest of the if statement runs. Also, the less than condition can never be fulfilled here as the first statement checks if the due date matches the current day. \n:::\n\n:::{.callout-note}\n## if(empty(prop(\"Due date\")), \"Someday\", \"Later\"\nNow sometimes we don't want to give the due date or we forgot to give them to a task. This is notified by the 'Someday' label. Now the 'Later' label is given when the 'Due tomorrow' condition fails, which means that the due date is greater than tomorrow.\n:::\n\nNow the reason why I went to explain this formula so elaborately is for you to appreciate the formula feature in Notion. Using clever little formulas like this you can efficiently automate many boring tasks. If it wasn't for this formula, we would have to manually check between the current date to the due date. So something to keep in mind while designing Notion databases.\n\nNow Notion also features some powerful ways of visualizing tabular data via 'views'. You can see that there is a 'Group table', 'Priority table' and a 'Status table' views in the database. These are nothing but the 'Master table' data grouped into different categories for easy visualization.\n\n::: column-page\n![To-do-list](images/list_view.gif)\n:::\n\nOkay, now we have a fair idea of what is there in this database and what each of the columns does. Now the funny part is that we won't be adding any tasks to this table using this page. Instead, we will be exclusively using the 'Task manager' for it.\n\n## Task manager\n\n::: column-page\n![Task manager](images/task_manager.gif)\n:::\n\nThe task manager page is your go-to page to list out incomplete tasks. By default, the page has categorized all tasks into their respective category as subsections. The inbox section is where you **add your task** to the to-do list and as soon as you add the associated category, it vanishes from the inbox and goes to its category subsection. Thus you don't have to worry about post categorizing into the subsection parts after you have added a task. And once you check the 'Done' column for a task, it is then archived on the Completed task list page to preserve the history of completed tasks.\n\n::: column-page\n![Adding a task to the inbox](images/task_manager_1.gif)\n:::\n\n## Task dashbaord\n\n::: column-page\n![Task dashboard](images/task_dash.png)\n:::\n\nTreat the task dashboard page as your command centre for all the tasks. Remember all those 'due status' labels that we had in the to-do list database. With the help of Notion's grouping feature for databases, we can easily visualize all the tasks according to their deadlines. In the 'task list subsection,' I have also added table views showing tasks associated with a particular priority. The purpose of this page is to easily get a glance at tasks that close the due date.\n\n## Completed tasks\n\nThe completed tasks page acts as an archive showcasing all the completed tasks. As someone used to say to me, it brings great joy to tick off all those tasks from the to-do list after spending your time and energy in completing them. The primary function of this page is to preserve and record task completion history. The database is identical to that of the earlier shown to-do-list database, as I have filtered it to only show row values where the 'Done' column is checked.\n\n## Conclusion\n\nI hope you have fun using this template. I enjoyed making this template and I aimed to make it simple and effective to use. To summarise, the to-do list is your main database, actually your only database. Everything else is just a modified version of this database where the info is shown in a different form using filtering and grouping features. After duplicating this template, you can tweak each of the parameters to suit your liking. You only need to change the parameters in the to-do-list database as the changes in it will be reflected in the rest of the pages. The only other thing that you will be needing to modify after you have changed the key parameters in the database are the headings, which are pretty straightforward to change. With that, I hope you find this template useful. Any feedback and suggestions are most welcome. You can comment below the article. \n\n#### Last updated on {.unnumbered .unlisted}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-07-01 08:05:02 IST\"\n```\n:::\n:::\n\n\n<a hidden href=\"https://info.flagcounter.com/ynrK\"><img src=\"https://s11.flagcounter.com/count2/ynrK/bg_000000/txt_FFFFFF/border_F0F0F0/columns_5/maxflags_25/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Flag Counter\" border=\"0\"/></a>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}