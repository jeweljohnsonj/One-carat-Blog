{
  "hash": "15fe6e7ebe6b84c26822fb818652bdae",
  "result": {
    "markdown": "---\ntitle: \"Chapter 1: Data visualization using ggplot2\"\ndescription: \"Learn how to plot different types of graphs using the ggplot2 package\"\ndate: \"12/02/2021\"\ndate-modified: last-modified\nformat: html\nimage: images/gg1.png\ncategories: [ggplot2, data visualization]\nfilters:\n   - social-share\nshare:\n  permalink: \"https://one-carat-blog.netlify.app/tutorials/data_viz/ggplot_1.html\"\n  description: \"Data visualization using ggplot2\"\n  twitter: true\n  facebook: true\n  reddit: true\n  stumble: true\n  tumblr: true\n  linkedin: true\n  email: true\n---\n\n\n## Before we begin\n\nThis series of chapters are focused on people who have a basic understanding of R programming. You are expected to know how the basic syntaxes of R language work like how to assign values, how to load your data, the different operations of R, and so on. If you just started out on your R journey then this chapter and the rest will become a roadblock for you. But fear not, there are some amazing websites that teach you the very basics of R, and that too for free! For an interactive way of learning, I recommend [DataCamp](https://app.datacamp.com). It is an online platform for learning programming languages. They have both paid and free classes. Luckily for us, they are providing the [introductory classes](https://app.datacamp.com/learn/courses/free-introduction-to-r) on R programming for free. This would be a great way to start your R journey. After you completed the course on data camp you can come back to this blog and you will find it very easy to comprehend and learn the various chapters that are available here. Coming from my own experience, it would be really helpful if you have your own data to work with. Rather than religiously following the steps in these chapters, I would recommend you have a goal in your mind before diving into the chapters. The goal should be to try incorporating the things you learned here into your own data. That would be the best way to learn anything in R. Hope you have a great time learning!\n\n## Introduction to ggplot2 package\n\nIn this chapter we will be plotting different types of graphs using a package called `{ggplot2}` in R. The **gg**plot2 package is based on '**grammar of graphics** plot' which provides a systematic way of doing data visualizations in R. With a few lines of code you can plot a simple graph and by adding more layers onto it you can create complex yet elegant data visualizations.\n\nA ggplot2 graph is made up of three components.\n\n1.  **Data**: Data of your choice that you want to visually summarise.\n2.  **Geometry** or **geoms**: Geometry dictates the type of graph that you want to plot and this information is conveyed to ggplot2 through the `geom()` command code. For e.g. using the `geom_boxplot()` command, you can plot a box plot with your data. Likewise, there are many types of geometry that you can plot using the ggplot2 package.\n3.  **Aesthetic** mappings: Aesthetics define the different kinds of information that you want to include in the plot. One fo the most important aesthetic is in choosing which data values to plot on the x-axis and the y-axis. Another example is changing the colour of the data points, which can be used to differentiate two different categories in the data. The use of aesthetics depends on the geometry that you are using. We use the command `aes()` for adding different types of aesthetics to the plot. We will learn more about `aes()` in [Chapter 2](https://one-carat-blog.netlify.app/tutorials/data_viz/project2.html). For now, we will only see what kind of plots can be made using the `{ggplot2}` package. We will learn how to tweak them in [Chapter 2](https://one-carat-blog.netlify.app/tutorials/data_viz/project2.html).\n\nThis tutorial is primarily focused on students who are beginners in R programming and wants to quickly plot their data without much of a hassle. So without further ado let's plot some graphs!\n\n## Setting up the prerequisites\n\nFirst, we need to install the `{ggplot2}` package in R as it does not come in the standard distribution of R.\n\n-   To install packages in R we use the command `install.packages()` and to load packages we use the command `library()`. Therefore to install and load `{ggplot2}` package we use the following lines of command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\nAll right we have the `{ggplot2}` package loaded, now we just need some data to plot. Most R programming tutorials use the `iris` dataset as an example. But this tutorial won't be like most tutorials. So let me introduce you to some lovely penguins from Palmer Station in Antarctica!\n\nFor this tutorial, we will be installing the `{palmerpenguins}` package which showcases body measurements taken from three different species of penguins from Antarctica. This package was made possible by the efforts of [Dr. Allison Horst](https://www.allisonhorst.com/). The penguin data was collected and made available by [Dr. Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) and the [Palmer Station, Antarctica LTER](https://pal.lternet.edu/).\n\n-   Install the `{palmerpenguins}` package and load it in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n```\n:::\n\n\nNow there are two datasets in this package. We will be using the `penguins` dataset which is a simplified version of the raw data present in the package.\n\n-   Use the command `head()` to display the first few values of `penguins` dataset to see how it looks like\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nhead(penguins)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe can see that are 8 columns in the dataset representing different values. Now let us try plotting some graphs with this data.\n\n### Bar graph\n\nSo we will try to plot a simple bar graph first. Bar graphs are used to represent categorical data where the height of the rectangular bar represents the value for that category. We will plot a bargraph representing frequency data for all three species of penguins.\n\n-   We will be using the `geom_bar()` command to plot the bar graph. Let us also use the command `theme_bw()` for a nice looking theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, fill = species)) + \n  xlab(\"Species\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for each species\") + \n  geom_bar() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Histogram\n\nHistograms are similar to bar graphs visually and are used to represent continuous data. Histograms splits data into 'bins' and tells us the number of observations for each of the bin.\n\n-   We can plot a histogram using the command `geom_histogram()` and change the bin width using the `binwidth = ` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for respective body mass\") + \n  geom_histogram(binwidth = 1000) + theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe warning message indicates that for two rows in the dataset, they have NA values or that they did not have any values present. This is true for real-life cases, as during data collection sometimes you will be unable to collect data due to various reasons. So this is perfectly fine.\n\n### Line graph\n\nLine graph simply joins together data points to show overall distribution.\n\n-   Use the command `geom_line()` for plotting a line graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = bill_length_mm, \n                            y = bill_depth_mm, colour = species)) + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  ggtitle(\"Bill length vs Bill depth\") + geom_line() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Scatter plot\n\nThe scatter plot simply denotes the data points in the dataset.\n\n-   Use the command `geom_point()` to plot a scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                            shape = species, colour = species)) + \n  xlab(\"Body mass (g)\") + ylab(\"Flipper length (mm)\") + \n  ggtitle(\"Body mass vs Filpper length\") + geom_point(size = 2) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Density Plot\n\nDensity plots are similar to histograms but show it shows the overall distribution of the data in a finer way. This way we will get a bell-shaped curve if our data follows a normal distribution.\n\n-   Use the command `geom_density()` to a density plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Density\") + ggtitle(\"Body mass distribution\") + \n  geom_density() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nSince we plotted for all three species the graph looks clustered. Let us try plotting the same graph for only *gentoo* penguins. We will use the `dplyr` package to `filter()` data for *gentoo* penguins alone. The `dplyr` package comes in-built with R so just load the `dplyr` package using the command `library()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_density(fill = \"red\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Dot-plot\n\nDot-plot is similar to a density plot but it shows discretely each data point in the distribution.\n\n-   Use the command `geom_dotplot()` to plot a dot-plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 100) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Rug-plot\n\nRug-plot is a simple way to visualize the distribution of data along the axis lines. It is often used in conjunction with other graphical representations.\n\n-   Use the command `geom_rug()` to plot a rug-plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g, y = flipper_length_mm)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_point(colour = \"darkred\") + geom_rug() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Box plot\n\nBox-plot is one of the better ways of showing data via quartiles. You can learn more about box plots here.\n\n-   Use the command `geom_boxplot()` to plot a box-plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, colour = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + geom_boxplot() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Violin plot\n\nViolin plot can be considered as the best of both a box-plot and a density plot. It shows the quartile values, like in a box-plot and also shows the distribution of the data, like in a density plot.\n\n-   Use the command `geom_violin()` in conjunction with `geom_boxplot()` to plot a violin plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + geom_boxplot(width = 0.2) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Saving your ggplot2 graphs\n\n-   Use the command `ggsave()` to save the graph locally. In the code below, 'my_graph' is the ggplot element containing your graph. The plot will be saved in your working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nmy_graph <- ggplot(data = penguins, aes(x = species, y = body_mass_g,\n                                    fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + \n  geom_boxplot(width = 0.2) +\n  theme_bw()\n\n#to save the plot\nggsave(my_graph, filename = \"your_graph_name.png\", width = 20, height = 20,\n       units = \"cm\")\n```\n:::\n\n\n## Summary\n\nI hope this tutorial helped you to get familiarize with the `{ggplot2}` commands. The best way to learn R is by actually doing it yourself. So try to recreate the examples given in this tutorial and then try to apply what you learned using the different datasets available in R. In [chapter 2](https://one-carat-blog.netlify.app/tutorials/data_viz/project2.html), we will learn how to customize the plots by tweaking the aesthetic mappings.\n\n## References\n\n1.  H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 [here](https://ggplot2.tidyverse.org/). You can also look at the [cheat sheet](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf) for all the syntax used in `ggplot2`. Also check this [out](https://github.com/erikgahner/awesome-ggplot2).\n\n2.  Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n\n<a hidden href=\"https://info.flagcounter.com/ynrK\"><img src=\"https://s11.flagcounter.com/count2/ynrK/bg_000000/txt_FFFFFF/border_F0F0F0/columns_5/maxflags_25/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Flag Counter\" border=\"0\"/></a>\n",
    "supporting": [
      "ggplot_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}