{
  "hash": "483e294e33e555aec1a92a6837c712c6",
  "result": {
    "markdown": "---\ntitle: \"Chapter 2: Customizing graphs in ggplot2\"\ndescription: \"Learn how to customize the aesthetics, labels and axes of a graph in ggplot2\"\ndate: \"12/04/2021\"\nformat: html\nimage: images/gg2.png\ncategories: [ggplot2, data visualization]\nfilters:\n   - social-share\nshare:\n  permalink: \"https://one-carat-blog.netlify.app/tutorials/data_viz/ggplot_2.html\"\n  description: \"Customizing graphs in ggplot2\"\n  twitter: true\n  facebook: true\n  reddit: true\n  stumble: true\n  tumblr: true\n  linkedin: true\n  email: true\n---\n\n\nAfter going through [Chapter 1](https://jeweljohnsonj.github.io/one-carat-blog/project1.html) you would be now familiar with the different types of graphs that you can plot using `{ggplot2}`. So for this tutorial, we will be learning how to customize those ggplot graphs to our liking. We will learn how to tweak the aesthetics, how to change labels and how to modify and change the axes in a graph.\n\nSo let us plot a graph from scratch and learn how to use different aesthetics available.\n\n## Setting up the prerequisites\n\nFirst, we need to install the `{ggplot2}` package in R as it does not come in the standard distribution of R. For the dataset, we will first download the `{Stat2Data}` package which houses a lot of cool datasets. For this tutorial let us use the `Hawks` dataset which showcases body measurements from three different species of Hawks. This data was collected by students and faculty at Cornell College in Mount Vernon and the dataset was made available by late Prof. Bob Black at Cornell College.\n\n-   To install packages in R we use the command `install.packages()` and to load packages we use the command `library()`. Therefore to install and load `{ggplot2}` and `{Stats2Data}` packages we use the following lines of command. Call the `Hawks` data using the `data()` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installng packages\ninstall.packages(\"ggplot2\")\ndevtools::install_github(\"statmanrobin/Stat2Data\")\n\n# Loading required packages\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\n# Loading the Hawks dataset\ndata(\"Hawks\")\n```\n:::\n\n\n-   Let us look at how the dataset is structured. Use `str()` command\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nstr(Hawks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t908 obs. of  19 variables:\n $ Month       : int  9 9 9 9 9 9 9 9 9 9 ...\n $ Day         : int  19 22 23 23 27 28 28 29 29 30 ...\n $ Year        : int  1992 1992 1992 1992 1992 1992 1992 1992 1992 1992 ...\n $ CaptureTime : Factor w/ 308 levels \" \",\"1:15\",\"1:31\",..: 181 25 138 42 62 71 181 88 261 192 ...\n $ ReleaseTime : Factor w/ 60 levels \"\",\" \",\"10:20\",..: 1 2 2 2 2 2 2 2 2 2 ...\n $ BandNumber  : Factor w/ 907 levels \" \",\"1142-09240\",..: 856 857 858 809 437 280 859 860 861 281 ...\n $ Species     : Factor w/ 3 levels \"CH\",\"RT\",\"SS\": 2 2 2 1 3 2 2 2 2 2 ...\n $ Age         : Factor w/ 2 levels \"A\",\"I\": 2 2 2 2 2 2 2 1 1 2 ...\n $ Sex         : Factor w/ 3 levels \"\",\"F\",\"M\": 1 1 1 2 2 1 1 1 1 1 ...\n $ Wing        : num  385 376 381 265 205 412 370 375 412 405 ...\n $ Weight      : int  920 930 990 470 170 1090 960 855 1210 1120 ...\n $ Culmen      : num  25.7 NA 26.7 18.7 12.5 28.5 25.3 27.2 29.3 26 ...\n $ Hallux      : num  30.1 NA 31.3 23.5 14.3 32.2 30.1 30 31.3 30.2 ...\n $ Tail        : int  219 221 235 220 157 230 212 243 210 238 ...\n $ StandardTail: int  NA NA NA NA NA NA NA NA NA NA ...\n $ Tarsus      : num  NA NA NA NA NA NA NA NA NA NA ...\n $ WingPitFat  : int  NA NA NA NA NA NA NA NA NA NA ...\n $ KeelFat     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Crop        : num  NA NA NA NA NA NA NA NA NA NA ...\n```\n:::\n:::\n\n\nSo there is a lot of information in the dataset which we can use for plotting. So let us try plotting them.\n\n## Building a plot\n\nOne thing to remember here is that how ggplot2 builds a graph is by adding layers. Let us start by plotting the basic layer first where the x-axis shows 'weight of the hawks' and the y-axis shows 'wingspan of the hawks'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\n\nggplot(data = Hawks, aes(x = Weight, y = Wing))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWait a sec! Where are my data points? So right now if we look at the syntax of the ggplot code we can see that we have not told ggplot2 which geometry we want. Do we want a scatter plot or a histogram or any other type of graph? So let us plot a scatter plot first. Use `geom_point()` command. By adding `geom_point()` to the `ggplot()` command is equivalent to adding an extra layer to the already existing layer that we got previously. Let us also use `theme_bw()` for a nice looking theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe got the graph! but we also got a warning message. The warning message tells us that the dataset which we had used to plot the graph had 11 rows of NA values and which could not be plotted into the graph. In real-life cases, we can have datasets with NA values due to various reasons, so this is fine.\n\nNow, this graph even though shows us data points we are not sure which point belongs to which species, as this dataset contains data for three species of Hawks. So let us try giving different colours to the points concerning the different species so that we are able to differentiate them.\n\n### Changing colour\n\n-   To change colour of the 'element' as a function species, we have to add `colour = Species` within the `aes()` of the ggplot command. I use the general term 'element' here to emphasize that the same change in aesthetics will work for most of other types of geometries in ggplot2 (something which you have seen extensively in [Chapter 1](https://jeweljohnsonj.github.io/one-carat-blog/project1.html). Like for a line graph, the 'element' would be lines. Here we have a scatter plot, so the 'element' would be points.\n\nAlso note that, in addition to `colour`, R also recognizes `color` and `col` wordings and they function the same as `colour`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe species abbreviations are the following: CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned.\n\nNow, this graph is way better than the previous one.\n\n### Changing point shape.\n\n-   Now instead of the colour let us change the shape of the point. Use `shape()` command in `aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, shape = Species)) + # instead of colour use shape.\n  geom_point() + theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow we did change the shape of points but it is still hard to make out the difference. Let us try specifying colour along with the shape\n\n-   Adding both `colour` and `shape` in aesthetics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, \n  colour = Species, shape = Species)) + geom_point() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis plot is much better than the previous one.\n\nNow let us try specifying `colour` within the `aes()` of the `geom()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, shape = Species)) + \n  geom_point(aes(colour = Species)) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe got the same graph as before! So what is the difference in specifying `colour` within `aes()` of `ggplot()` compared to the same but within `geom_point()`. Here Let us look at another example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nI manually changed the colour of the points to red colour. Please not that you can also use hex codes to specify the colour attribute. Now let try specifying `colour` to the `aes()` within the `geom()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point(aes(colour = Species)) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nYou can see that the red colour is overridden by other colours. So the `aes()` mapping (in this case `colour`) within `geom_point()` will override any `aes()` mapping within `ggplot()`. And whatever `aes()` mapping we give within `ggplot()` will be inherited by all other geom layers that are specified.\n\nLet us see another case.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(colour = \"darkred\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(aes(colour = \"darkred\")) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIf you compare both the codes, the only difference is that the `colour = \"darkred\"` command was outside `aes()` in the first code and inside `aes()` in the second code. So why didn't the second graph have the same dark-red coloured points as the first one? The reason is that in the first code we are explicitly told to have all data points to be coloured dark-red but that is not the case with the second code. In the second code, since we have specified it inside `aes()`, ggplot is trying to look for a variable called \"darkred\" inside the dataset and colour it accordingly. This is why the legend that appears in the second graph has listed \"darkred\" as a category. And ggplot fails to find the variable called \"darkred\" but it still recognizes the `colour` command line and colour all the points in red. So the bottom line is that R has a pre-determined way of reading a code, so we users should well-understand what each line is expected to do and should not expect R to just fill it in accordingly to what we write.\n\nNow let us try a few other examples;\n\n### Changing size\n\n-   Use `size()` in `aes()`. The shape aesthetic works best if the input variable is categorical.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Species, y = Hallux, size = Culmen)) + \n  geom_point() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Changing colour, shape and size manually\n\n-   Use `scale_shape_manual()` for changing shape, similarly `scale_color_manual()` for changing colour and `scale_size_manual()` for changing size of the element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Hallux, colour = Species,\n                         shape = Species, size = Species)) + \n  geom_point() +\n  scale_shape_manual(values=c(1, 2, 3)) +\n  scale_color_manual(values=c('red','blue', 'green')) +\n  scale_size_manual(values=c(1,5,10)) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### Changing the opcaity of the elements\n\n-   Use `alpha()` within the `geom()` with a numeric value to change the opacity of the elements. This is useful for visualizing large datasets such as this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point(alpha = 1/5) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nThe same commands also work for most of the other types of `geom()`. Now let us see a few other aesthetics in other types of geoms.\n\n### Changing fill colour\n\n-   Use `fill()` in `aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n-   Use `scale_fill_manual()` to manually change the colours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_bw() + \n  scale_fill_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\"))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### Changing line type\n\n-   Use `linetype` in `aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n-   You can manually change line types using `scale_linetype_manual()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + \n  scale_linetype_manual(values= c(\"twodash\", \"longdash\", \"dotdash\")) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nNow let us also see how to change the labels in a graph.\n\n### Viewing datapoints as labels\n\n-   You can plot data points as their values or as their labels using the `geom_text()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\ndata(\"Hawks\")\n\n# Plotting the values\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_text(aes(label = Wing)) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plotting the values according to species text label\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_text(aes(label = Species)) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n:::\n\n\n### Changing labels in the axes\n\n-   Use `xlab()` to change x-axis title, `ylab()` to change y-axis title, `ggtitle()` with `label` and `subtitle` to add title and subtitle respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + xlab(\"Weight (gm)\") + ylab(\"Wing (mm)\") +\n  ggtitle(label = \"Weight vs Wing span in three different species of Hawks\", \n          subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\")\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n-   The same result can be obtained by using `labs()` to specify each label in the graph. For renaming the legend title, the command will depend on what is there within the `aes()` or in other words what is the legend based on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + labs(x = \"Weight (gm)\", y = \"Wing (mm)\", \n  title= \"Weight vs Wing span in three different species of Hawks\", \n  subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\",\n  caption = \"Source: Hawk dataset from Stat2Data r-package\", #caption for the graph\n  colour = \"Hawk Species\", # rename legend title\n  tag = \"A\") #figure tag\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Tweaking the axes\n\n-   Use `xlim()` and `ylim()` for limiting x and y axes respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + xlim(c(0,1000)) + ylim(c(200,350))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n-   Use `coord_cartesian()` to zoom in on a particular area in the graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + coord_cartesian(xlim = c(0,1000),\n                                                   ylim = c(200,350))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n-   Use `coord_flip()` to flip the x and y axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + coord_flip()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n-   Use `scale_x_continuous()` for tweaking the x-axis. The same command work for the y-axis also. You can include `label()` inside the command to manually label the breaks of the axes.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + scale_x_continuous(breaks = c(0,1000,2000))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + \n  scale_x_continuous(breaks = c(0,1000,2000),label = c(\"low\", \"medium\", \"high\"))\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n-   Use `scale_y_reverse()` to display the y values in the descending order. Same command applies to x-axis also.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(Stat2Data)\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](ggplot_2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Typical aesthetic mappings\n\n| Aesthetic | Description |\n|---|---|\n| x | X axis position |\n| y | Y axis position |\n| fill | Fill colour |\n| color | Colour points, outlines of other geoms |\n| size | Area or radius of points, thickness of the lines |\n| alpha | Transparency |\n| linetype | Line dash pattern |\n| labels | Text on a plot or axes |\n| shape | Shape |\n\n: Table of aesthetic mappings\n\nWe are now familiar with all these different aesthetic mappings.\n\n## Summary\n\nIn this tutorial, we learned how to modify aesthetic present for different geoms in `{ggplot2}` Then we learned how to modify labels in a graph and finally, we learned how to modify and change the axes elements. This tutorial is in no way exhaustive of the different ways you can modify a graph as there many more methods which are not discussed here. Instead of trying to include everything, this tutorial tries to be a stepping stone to help students of R to learn the basics of tweaking a graph. Try to practice what is covered here using other datasets available in the r-package `{Stat2Data}`.\n\n## References\n\n1.  H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 [here](https://ggplot2.tidyverse.org/). You can also look at the [cheat sheet](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf) for all the syntax used in `ggplot2`. Also check this [out](https://github.com/erikgahner/awesome-ggplot2).\n\n2.  Ann Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\n\n#### Last updated on {.unnumbered .unlisted .appendix}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-08-28 11:11:59 IST\"\n```\n:::\n:::\n\n\n<a hidden href=\"https://info.flagcounter.com/ynrK\"><img src=\"https://s11.flagcounter.com/count2/ynrK/bg_000000/txt_FFFFFF/border_F0F0F0/columns_5/maxflags_25/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Flag Counter\" border=\"0\"/></a>\n",
    "supporting": [
      "ggplot_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}