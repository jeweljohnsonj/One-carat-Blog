{
  "hash": "835a4c1bc0da17a68efa8bfa001c7627",
  "result": {
    "markdown": "---\ntitle: \"Chapter 4: Publication ready plots using ggpubr\"\ndescription: \"Learn how to make publication ready plots and visualize results of statistical tests directly on the plot using the ggpubr package\"\ndate: \"01/06/2022\"\nformat: html\nimage: images/gg4.png\ncategories: [ggpubr, data visualization]\nfilters:\n   - social-share\nshare:\n  permalink: \"https://one-carat-blog.netlify.app/tutorials/data_viz/ggpubr.html\"\n  description: \"Publication ready plots using ggpubr\"\n  twitter: true\n  facebook: true\n  reddit: true\n  stumble: true\n  tumblr: true\n  linkedin: true\n  email: true\n---\n\n\n## Introduction to ggpubr package\n\nIf you are a researcher who wants to have publication-ready plots but does not want to get hassled by the `{ggplot2}` package, then let me introduce you to the `{ggpubr}` package. Using this package you can make publication grade plots without spending too much time modifying things. Even if you are a beginner in R programming and does not know how to use the`{ggplot2}` package, you will still be able to plot graphs using the `{ggpubr}` package because of how easy the syntax is. But having prior knowledge of the `{ggplot2}` package will surely make things easier, and an experienced person will know that any plot which can be plotted using `{ggpubr}` can also be plotted using `{ggplot2}`. So let us start!\n\nFirst things first, install the `{ggpubr}` package and load it in the library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggpubr\")\nlibrary(ggpubr)\n```\n:::\n\n\nLet us see what all plots can be plotted.\n\n## Plots in ggpubr package\n\n### Balloon plot\n\nThe balloon plot is similar to bar plots as it is used to represent a large categorical dataset. The size and colour of the dot can be attributed to different values in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\nlibrary(ggpubr)\n\nggballoonplot(mtcars, fill = \"value\") + \n  scale_fill_viridis(option = \"turbo\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### Bar plot\n\nA simple bar graph which is used for representing categorical data. By using the `add` function inside the main plot function, you can easily display summary statistics like mean, median etc. and various types of errors like standard error, standard deviation and various others. You can view the whole list of features [here](https://rpkgs.datanovia.com/ggpubr/reference/ggbarplot.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(ggpubr)\nlibrary(palmerpenguins)\n\nggbarplot(penguins,\n          x = \"species\",\n          y = \"bill_length_mm\",\n          add = c(\"mean_sd\"),\n          fill = \"species\",\n          label = TRUE,\n          lab.nb.digits = 2,\n          lab.vjust = -2.2,\n          lab.col = \"red\",\n          title = \"Mean bill length of penguins\",\n          subtitle = \"Error bars shows standard deviation\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill length (mm)\",\n          ylim = c(0,60),\n          palette = \"npg\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Box plot\n\nStandard box plot graph. Like in the previous graph you can specify colour palettes from the scientific journal palettes featured in the `{ggsci}` R package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nggboxplot(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          color = \"species\",\n          palette = \"futurama\",\n          add = \"jitter\",\n          shape = \"species\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Violin plot\n\nA simple violin plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nggviolin(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          fill = \"species\",\n          palette = \"npg\",\n          add = \"boxplot\",\n          shape = \"species\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Density plot\n\nStandard density plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nggdensity(penguins,\n          x = \"body_mass_g\",\n          color = \"species\",\n          rug = TRUE,\n          fill = \"species\",\n          add = \"mean\",\n          title = \"Mean body mass of penguins\",\n          xlab = \"Body mass (g)\",\n          palette = \"lancet\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Donut chart\n\nSimilar to a pie diagram. Also please note that you don't have to explicitly mention x and y parameters in the command. You can simply just type the column names, the first column name will be shown on the x-axis and the second on the y axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\nlibrary(dplyr)\nlibrary(tidyr)\n\npenguins_freq <- penguins %>% drop_na() %>%\n  group_by(species) %>%\n  summarise(frequency = length(species))\n\nlabs <- paste0(penguins_freq$species, \" (\", round((penguins_freq$frequency/sum(penguins_freq$frequency))*100, digits = 0), \"%)\")\n\nggdonutchart(penguins_freq,\n             \"frequency\",\n             label = labs,\n             fill = \"species\",\n             palette = \"ucscgb\",\n             lab.pos = \"in\",\n             title = \"Frequency of penguins\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Pie chart\n\nSimple pie chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\nlibrary(dplyr)\nlibrary(tidyr)\n\npenguins_freq <- penguins %>% drop_na() %>%\n  group_by(species) %>%\n  summarise(frequency = length(species))\n\nlabs <- paste0(penguins_freq$species, \" (\", round((penguins_freq$frequency/sum(penguins_freq$frequency))*100, digits = 0), \"%)\")\n\nggpie(penguins_freq,\n             \"frequency\",\n             label = labs,\n             fill = \"species\",\n             palette = \"futurama\",\n             lab.pos = \"in\",\n             title = \"Frequency of penguins\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Dot chart\n\nThis is an upgrade from bar charts where the data is displayed with minimum clutter in the form of dots. This allows the readers to not get bothered about things like the slope of a line in case of line plots, or width of bars in case of bar charts or any other confusing aesthetics of a plot. You can read more about this graph [here](https://doi.org/10.2307/2288400). It is also called \"Cleveland dot plots\" named after the founder of this plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(ggpubr)\nlibrary(tidyr)\n\nmtcars %>% rownames_to_column(var = \"car_names\") %>% \n  mutate(cyl = as.factor(cyl)) %>%\n  ggdotchart(\"car_names\",\n             \"mpg\",\n             color = \"cyl\",\n             palette = \"aaas\",\n             sorting = \"ascending\",\n             rotate = TRUE,\n             y.text.col = TRUE,\n             dot.size = 2,\n             ylab = \"Miles per gallon of fuel\",\n             title = \"Mileage of different cars\",\n             ggtheme = theme_pubr()) + theme_cleveland() \n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Dot plot\n\nSimple dot plot. Similar to a box plot. You can also overlay a box plot or a violin plot over the dot plot using the `add` function inside the main function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nggdotplot(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          subtitle = \"Error bars shows standard deviation\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          fill = \"species\",\n          add = \"mean_sd\",\n          palette = \"locuszoom\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Histogram plot\n\nThe same function as that of a density plot but the data is represented in bars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\ngghistogram(penguins,\n            x = \"body_mass_g\",\n            add = \"mean\",\n            fill = \"species\",\n            rug = TRUE,\n            title = \"Body mass of penguins\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Frequency\",\n            palette = \"startrek\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Line plot\n\nA simple line plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nggline(penguins,\n      x = \"body_mass_g\",\n      y = \"bill_depth_mm\",\n      linetype = \"species\",\n      shape = \"species\",\n      color = \"species\",\n      title = \"Body mass vs Bill depth\",\n      xlab = \"Body mass (g)\",\n      ylab = \"Bill depth (mm)\",\n      palette = \"startrek\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Plotting paired data\n\nThis is essentially a box plot but for paired data. Widely used to represent treatment groups showing before and after results of the same sample. We will be using the Anorexia dataset from the `{PairedData}` package in R. It features weights of girls before and after treatment for Anorexia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"PairedData\")\nlibrary(PairedData)\nlibrary(ggpubr)\ndata(\"Anorexia\")\n\nAnorexia %>% \n  ggpaired(cond1 = \"Prior\",\n           cond2 = \"Post\",\n           title = \"Weights of girls before and after treatment for anorexia\",\n           xlab = \"Condition\",\n           ylab = \"Weight (lbs)\",\n           fill = \"condition\",\n           line.color = \"darkgreen\",\n           line.size = 0.2,\n           palette = \"simpsons\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Quantile-Quantile plot\n\nQuantile-Quantile plot or QQ plot is useful in assessing the distribution of a data. A data having normal distribution will be shown as a straight line of the formula 'y=x' in the QQ plot. Points outside the confidence interval are outliers in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>% ggqqplot(\"body_mass_g\",\n                      color = \"species\",\n                      palette = \"aaas\",\n                      title = \"Quantile-Quantile plot\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Scatter plot\n\nA simple scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>% filter(species == \"Chinstrap\") %>%\n  ggscatter(\"body_mass_g\",\n            \"bill_length_mm\",\n            add = \"reg.line\",\n            add.params = list(color = \"darkred\", fill = \"yellow\"),\n            cor.coef = TRUE,\n            cor.method = \"pearson\",\n            conf.int = TRUE,\n            title = \"Body mass distribution of Chinstrap penguins\",\n            subtitle = \"Correlation method used was Pearson\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill lenght (mm)\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nYou can also use scatter plot for data having different categories. Using `ellipse=TRUE` you can group data to its category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>%\n  ggscatter(\"body_mass_g\",\n            \"bill_length_mm\",\n            color = \"species\",\n            alpha = 0.5,\n            palette = \"d3\",\n            ellipse = TRUE, #adds an ellipse to group data of different category\n            title = \"Body mass vs Bill length\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill length (mm)\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nYou can also label points in the scatter plot using the `label` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nmtcars %>% rownames_to_column(var = \"car_names\") %>% \n  mutate(cyl = as.factor(cyl)) %>%\n  ggscatter(\"wt\",\n             \"mpg\",\n             color = \"cyl\",\n             palette = \"nejm\",\n             xlab = \"Weight (1000 lbs)\",\n             ylab = \"Miles per gallon of fuel\",\n             title = \"Mileage vs Weight of different cars\",\n             label = \"car_names\",\n             repel = TRUE,\n             ggtheme = theme_pubr()) + theme_cleveland() \n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Scatter plot with marginal histograms\n\nThis is plot is a combination of scatter plot and histograms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>%\n  ggscatterhist(\"body_mass_g\",\n            \"bill_length_mm\",\n            color = \"species\",\n            alpha = 0.5, size = 2,\n            palette = \"futurama\",\n            margin.params = list(fill = \"species\", color = \"black\", size = 0.2),\n            title = \"Body mass distribution of penguins\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill length (mm)\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nYou can also choose to show box plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>%\n  ggscatterhist(\"body_mass_g\",\n            \"bill_depth_mm\",\n            color = \"species\",\n            alpha = 0.5, size = 2,\n            palette = \"futurama\",\n            margin.plot = \"boxplot\",\n            title = \"Body mass vs Bill depth\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill depth (mm)\",\n            ggtheme = theme_bw())\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Other functions in ggpubr package\n\n### Statistical tests\n\nYou can do various statistical tests using the functions in the `{ggpubr}` package. We will be using the Anorexia dataset in the `{PairedData}` package in R. In the code given below, we are doing a Wilcoxon test to compare the mean weights of girls before treatment to the mean weights of girls post-treatment. Since the data is paired we will indicate it by the `paired = TRUE` function. A word of caution! Before starting to do statistical tests please ensure whether you can fulfil conditions for using parametric tests or not using or data. You can check whether your data is normally distributed using a QQ plot or by using any normality tests.\n\nPS: I use knitr::kable() just for illustrative purpose only. You can run the command inside the kable() argument and you will be fine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"PairedData\")\nlibrary(PairedData)\nlibrary(dplyr)\nlibrary(tidyr)\n\ndata(\"Anorexia\")\n\n# tidying the data\nAnorexia_new <- Anorexia %>% \n  pivot_longer(c(Prior, Post), names_to = \"condition\", values_to = \"weight\")\nknitr::kable(compare_means(weight ~ condition, Anorexia_new, paired = TRUE))\n```\n\n::: {.cell-output-display}\n|.y.    |group1 |group2 |         p|   p.adj|p.format |p.signif |method   |\n|:------|:------|:------|---------:|-------:|:--------|:--------|:--------|\n|weight |Prior  |Post   | 0.0008392| 0.00084|0.00084  |***      |Wilcoxon |\n:::\n:::\n\n\nYou can also do parametric tests like ANOVA and its non-parametric version; the Kruskal-Wallis test, which can be followed by multiple pairwise comparisons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(compare_means(body_mass_g ~ species, penguins, method = \"anova\"))\n```\n\n::: {.cell-output-display}\n|.y.         |  p| p.adj|p.format |p.signif |method |\n|:-----------|--:|-----:|:--------|:--------|:------|\n|body_mass_g |  0|     0|<2e-16   |****     |Anova  |\n:::\n\n```{.r .cell-code}\nknitr::kable(compare_means(body_mass_g ~ species, penguins, method = \"kruskal.test\"))\n```\n\n::: {.cell-output-display}\n|.y.         |  p| p.adj|p.format |p.signif |method         |\n|:-----------|--:|-----:|:--------|:--------|:--------------|\n|body_mass_g |  0|     0|<2e-16   |****     |Kruskal-Wallis |\n:::\n:::\n\n\nNow doing pairwise comparisons\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiple pairwise comparisons\n# when there is more than two levels, the function automatically does pairwise comparisons\nknitr::kable(compare_means(body_mass_g ~ species, penguins))\n```\n\n::: {.cell-output-display}\n|.y.         |group1    |group2    |         p| p.adj|p.format |p.signif |method   |\n|:-----------|:---------|:---------|---------:|-----:|:--------|:--------|:--------|\n|body_mass_g |Adelie    |Chinstrap | 0.4854773|  0.49|0.49     |ns       |Wilcoxon |\n|body_mass_g |Adelie    |Gentoo    | 0.0000000|  0.00|<2e-16   |****     |Wilcoxon |\n|body_mass_g |Chinstrap |Gentoo    | 0.0000000|  0.00|<2e-16   |****     |Wilcoxon |\n:::\n:::\n\n\n### Descriptive statistics by groups\n\nUsing the function `desc_statby()` we can get the summary statistics of a dataset in the form of a data frame. Similar to the `summary()` function in base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\"))\n```\n\n::: {.cell-output-display}\n|species   | length|  min|  max| median|     mean|   iqr|     mad|       sd|       se|       ci| range|        cv|      var|\n|:---------|------:|----:|----:|------:|--------:|-----:|-------:|--------:|--------:|--------:|-----:|---------:|--------:|\n|Adelie    |    151| 2850| 4775|   3700| 3700.662| 650.0| 444.780| 458.5661| 37.31758| 73.73601|  1925| 0.1239146| 210282.9|\n|Chinstrap |     68| 2700| 4800|   3700| 3733.088| 462.5| 370.650| 384.3351| 46.60747| 93.02891|  2100| 0.1029537| 147713.5|\n|Gentoo    |    123| 3950| 6300|   5000| 5076.016| 800.0| 555.975| 504.1162| 45.45463| 89.98198|  2350| 0.0993134| 254133.2|\n:::\n:::\n\n\nYou can also show the data as a table using the `ggtexttable()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\nsummary_tbl\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Showing p-values and statistical results within plots\n\nUsing various functions you can show statistical outputs within the plots.\n\nUsing Wilcoxon test for paired data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"PairedData\")\nlibrary(PairedData)\nlibrary(ggpubr)\n\ndata(\"Anorexia\")\nAnorexia %>% \n  ggpaired(cond1 = \"Prior\",\n           cond2 = \"Post\",\n           title = \"Weights of girls before and after treatment for anorexia\",\n           xlab = \"Condition\",\n           ylab = \"Weight (lbs)\",\n           fill = \"condition\",\n           line.color = \"darkgreen\",\n           line.size = 0.2,\n           palette = \"simpsons\") + stat_compare_means(paired = TRUE)\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nUsing t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>% filter(species == \"Adelie\" & island == c(\"Biscoe\",\"Torgersen\")) %>%\nggboxplot(x = \"island\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Island\",\n          ylab = \"Bill depth (mm)\",\n          color = \"island\",\n          palette = \"futurama\",\n          add = \"jitter\",\n          shape = \"island\") + stat_compare_means(method = \"t.test\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nUsing ANOVA test and t-test as post hoc test. For pairwise comparison, we have to manually list out the pairwise comparisons that we want.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\n# listing out pairwise comparisons \ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\n\nggboxplot(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          color = \"species\",\n          palette = \"futurama\",\n          add = \"jitter\",\n          shape = \"species\") + \n  stat_compare_means(method = \"anova\", label.y = 25) + #anova test\n  stat_compare_means(comparisons = compare, method = \"t.test\") # post hoc test using t-test\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nUsing Kruskal-Wallis test and Wilcoxon test as post hoc test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\nggboxplot(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          color = \"species\",\n          palette = \"futurama\",\n          add = \"jitter\",\n          shape = \"species\") + \n  stat_compare_means(label.y = 25) + #anova test\n  stat_compare_means(comparisons = compare) # post hoc test using t-test\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nYou can also choose to show only asterisks as significance levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\nggboxplot(penguins ,\n          x = \"species\",\n          y = \"bill_depth_mm\",\n          title = \"Mean bill depth of penguins\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill depth (mm)\",\n          color = \"species\",\n          palette = \"futurama\",\n          add = \"jitter\",\n          shape = \"species\") + \n  stat_compare_means(label.y = 25) +\n  stat_compare_means(comparisons = compare, label = \"p.signif\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nFor illustrative purposes, I have used box plots for showing p-values and statistical test results, but you can do the same with most of the other types of graphs shown in this chapter.\n\n### Faceting plots into grids\n\nYou can also facet different plots into grids using the function `facet.by`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>% drop_na() %>%\n  ggscatter(\"body_mass_g\",\n            \"bill_length_mm\",\n            color = \"species\",\n            alpha = 0.5,\n            palette = \"d3\",\n            facet.by = c(\"island\", \"sex\"), # faceting graphs via island and sex categories\n            title = \"Body mass vs Bill length\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill length (mm)\")\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Adding paragraph\n\nYou can also add a paragraph beneath the plot of your interest using the `ggparagraph()` and `ggarrange()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"PairedData\")\nlibrary(PairedData)\ndata(\"Anorexia\")\nlibrary(ggpubr)\n\ntext <- paste(\"The above dataset shows the weight (in lbs) of 17 girls before\",\n              \"and after they got treatment for anorexia.\", sep = \" \")\n\ntext_plot <- ggparagraph(text, face = \"bold\", size = 12)\n\nplot <- Anorexia %>% \n  ggpaired(cond1 = \"Prior\",\n           cond2 = \"Post\",\n           title = \"Weights of girls before and after treatment for anorexia\",\n           xlab = \"Condition\",\n           ylab = \"Weight (lbs)\",\n           fill = \"condition\",\n           line.color = \"darkgreen\",\n           line.size = 0.2,\n           palette = \"simpsons\")\n\nggarrange(plot, text_plot,\n         ncol = 1, nrow = 2,\n         heights = c(1, 0.3))\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Having plots placed adjacent to each other\n\nYou can use the `ggarrange()` function to place different plots together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nbar_plot <- ggbarplot(penguins,\n          x = \"species\",\n          y = \"bill_length_mm\",\n          add = c(\"mean_sd\"),\n          fill = \"species\",\n          label = TRUE,\n          lab.nb.digits = 2,\n          lab.vjust = -2.2,\n          lab.col = \"red\",\n          title = \"Mean bill length of penguins\",\n          subtitle = \"Error bars shows standard deviation\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill length (mm)\",\n          ylim = c(0,60),\n          palette = \"npg\")\n\nhistogram <- gghistogram(penguins,\n            x = \"body_mass_g\",\n            add = \"mean\",\n            fill = \"species\",\n            rug = TRUE,\n            title = \"Body mass of penguins\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Frequency\",\n            palette = \"startrek\")\n\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\n\n# arranging plots together\nggarrange(bar_plot, histogram,\n         ncol = 2, nrow = 2, labels = c(\"A\", \"B\"),\n         heights = c(1, 0.3))\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nIf you are arranging three graphs it is better to use the `grid.arrange()` function from the `{gridExtra}` package in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\nbar_plot <- ggbarplot(penguins,\n          x = \"species\",\n          y = \"bill_length_mm\",\n          add = c(\"mean_sd\"),\n          fill = \"species\",\n          label = TRUE,\n          lab.nb.digits = 2,\n          lab.vjust = -2.2,\n          lab.col = \"red\",\n          title = \"Mean bill length of penguins\",\n          subtitle = \"Error bars shows standard deviation\",\n          xlab = \"Species of penguins\",\n          ylab = \"Bill length (mm)\",\n          ylim = c(0,60),\n          palette = \"npg\")\n\nhistogram <- gghistogram(penguins,\n            x = \"body_mass_g\",\n            add = \"mean\",\n            fill = \"species\",\n            rug = TRUE,\n            title = \"Body mass of penguins\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Frequency\",\n            palette = \"startrek\")\n\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\n\n# arranging three plots together\nlayout_matrix <- matrix(c(1, 1, 2, 2, 4, 3, 3, 4), nrow = 2, byrow = TRUE)\nlibrary(gridExtra)\ngrid.arrange(bar_plot, histogram, summary_tbl, layout_matrix = layout_matrix)\n```\n\n::: {.cell-output-display}\n![](ggpubr_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## Saving your plot\n\nUsing the function `ggexport()` you can save your plot. Tweak width and height accordingly and also change the resolution to fit your needs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggpubr)\n\npenguins %>%\n  ggscatterhist(\"body_mass_g\",\n            \"bill_length_mm\",\n            color = \"species\",\n            alpha = 0.5, size = 2,\n            palette = \"futurama\",\n            margin.params = list(fill = \"species\", color = \"black\", size = 0.2),\n            title = \"Body mass distribution of penguins\",\n            xlab = \"Body mass (g)\",\n            ylab = \"Bill length (mm)\") %>%\n  ggexport(filename = \"my_plot.png\", width = 800, height = 600, res = 150)\n```\n:::\n\n\n## Summary\n\nIn this chapter we learned how to plot publication standard graphs using the `{ggpubr}` package in R. Even with little to no experience in using the `{ggplot2}` package in R, one can plot graphs with ease using the `{ggpubr}` package. To quickly recap, from this chapter we saw;\n\n1.  How to plot around 15 different types of graphs\n2.  How to facet plots\n3.  How to do basic statistical tests and visualize them within graphs\n4.  How to add paragraph text under the graphs\n5.  How to group different graphs into one single file\n\nI hope this chapter was useful to you. Check out the other chapter for more beginner content.\n\n## References\n\n1.  Alboukadel Kassambara (2020). ggpubr: 'ggplot2' Based Publication Ready Plots. R package version 0.4.0. https://CRAN.R-project.org/package=ggpubr\n\n2.  Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\n\n3.  Stephane Champely (2018). PairedData: Paired Data Analysis. R package version 1.1.1. https://CRAN.R-project.org/package=PairedData\n\n4.  William S. Cleveland & Robert McGill (1984) Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods, Journal of the American Statistical Association, 79:387, 531-554, DOI: 10.1080/01621459.1984.10478080\n\n5.  Hadley Wickham, Romain François, Lionel Henry and Kirill Müller (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr\n\n6.  Hadley Wickham (2021). tidyr: Tidy Messy Data. R package version 1.1.4. https://CRAN.R-project.org/package=tidyr\n\n7.  H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n\n8.  Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2021). Rvision - Colorblind-Friendly Color Maps for R. R package version 0.6.2.\n\n#### Last updated on {.unnumbered .unlisted .appendix}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-11-01 14:20:18 IST\"\n```\n:::\n:::\n\n\n<a hidden href=\"https://info.flagcounter.com/ynrK\"><img src=\"https://s11.flagcounter.com/count2/ynrK/bg_000000/txt_FFFFFF/border_F0F0F0/columns_5/maxflags_25/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Flag Counter\" border=\"0\"/></a>\n",
    "supporting": [
      "ggpubr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}